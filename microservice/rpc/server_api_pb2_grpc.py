# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from microservice.message import server_api_pb2 as server__api__pb2


class ServerApiStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.hey_server = channel.unary_unary(
        '/MicroService.ServerApi/hey_server',
        request_serializer=server__api__pb2.Empty.SerializeToString,
        response_deserializer=server__api__pb2.Empty.FromString,
        )
    self.signup = channel.unary_unary(
        '/MicroService.ServerApi/signup',
        request_serializer=server__api__pb2.SignupReq.SerializeToString,
        response_deserializer=server__api__pb2.SignupResp.FromString,
        )
    self.init_profile = channel.unary_unary(
        '/MicroService.ServerApi/init_profile',
        request_serializer=server__api__pb2.InitProfileReq.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.is_logged_in = channel.unary_unary(
        '/MicroService.ServerApi/is_logged_in',
        request_serializer=server__api__pb2.Empty.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.login = channel.unary_unary(
        '/MicroService.ServerApi/login',
        request_serializer=server__api__pb2.LoginReq.SerializeToString,
        response_deserializer=server__api__pb2.LoginResp.FromString,
        )
    self.logout = channel.unary_unary(
        '/MicroService.ServerApi/logout',
        request_serializer=server__api__pb2.LogoutReq.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.is_username_available = channel.unary_unary(
        '/MicroService.ServerApi/is_username_available',
        request_serializer=server__api__pb2.CheckUsernameReq.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.is_email_available = channel.unary_unary(
        '/MicroService.ServerApi/is_email_available',
        request_serializer=server__api__pb2.CheckEmailReq.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.change_profile = channel.unary_unary(
        '/MicroService.ServerApi/change_profile',
        request_serializer=server__api__pb2.ChangeProfileReq.SerializeToString,
        response_deserializer=server__api__pb2.ResultBool.FromString,
        )
    self.change_email = channel.unary_unary(
        '/MicroService.ServerApi/change_email',
        request_serializer=server__api__pb2.ChangeEmailReq.SerializeToString,
        response_deserializer=server__api__pb2.Empty.FromString,
        )
    self.change_username = channel.unary_unary(
        '/MicroService.ServerApi/change_username',
        request_serializer=server__api__pb2.ChangeUsernameReq.SerializeToString,
        response_deserializer=server__api__pb2.Empty.FromString,
        )
    self.get_file = channel.unary_stream(
        '/MicroService.ServerApi/get_file',
        request_serializer=server__api__pb2.Empty.SerializeToString,
        response_deserializer=server__api__pb2.Chunk.FromString,
        )


class ServerApiServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def hey_server(self, request, context):
    """
    Don't do anything
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def signup(self, request, context):
    """
    Create new user by username, email, passsword and other optional information
    Active a new session for client to comminucate server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def init_profile(self, request, context):
    """
    Set public informations like bio, full_name and other
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_logged_in(self, request, context):
    """
    Check this current session is active
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def login(self, request, context):
    """
    Authenticate user and active current session
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def logout(self, request, context):
    """
    Delete user session
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_username_available(self, request, context):
    """
    Check that the username is available
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def is_email_available(self, request, context):
    """
    Check that the email is valid and avaialable
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def change_profile(self, request, context):
    """
    Change public informations like bio, full_name and other
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def change_email(self, request, context):
    """
    Change and Set new email
    Send token to confirm new email
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def change_username(self, request, context):
    """
    Change and Set new username
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def get_file(self, request, context):
    """
    Upload file test
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServerApiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'hey_server': grpc.unary_unary_rpc_method_handler(
          servicer.hey_server,
          request_deserializer=server__api__pb2.Empty.FromString,
          response_serializer=server__api__pb2.Empty.SerializeToString,
      ),
      'signup': grpc.unary_unary_rpc_method_handler(
          servicer.signup,
          request_deserializer=server__api__pb2.SignupReq.FromString,
          response_serializer=server__api__pb2.SignupResp.SerializeToString,
      ),
      'init_profile': grpc.unary_unary_rpc_method_handler(
          servicer.init_profile,
          request_deserializer=server__api__pb2.InitProfileReq.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'is_logged_in': grpc.unary_unary_rpc_method_handler(
          servicer.is_logged_in,
          request_deserializer=server__api__pb2.Empty.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'login': grpc.unary_unary_rpc_method_handler(
          servicer.login,
          request_deserializer=server__api__pb2.LoginReq.FromString,
          response_serializer=server__api__pb2.LoginResp.SerializeToString,
      ),
      'logout': grpc.unary_unary_rpc_method_handler(
          servicer.logout,
          request_deserializer=server__api__pb2.LogoutReq.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'is_username_available': grpc.unary_unary_rpc_method_handler(
          servicer.is_username_available,
          request_deserializer=server__api__pb2.CheckUsernameReq.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'is_email_available': grpc.unary_unary_rpc_method_handler(
          servicer.is_email_available,
          request_deserializer=server__api__pb2.CheckEmailReq.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'change_profile': grpc.unary_unary_rpc_method_handler(
          servicer.change_profile,
          request_deserializer=server__api__pb2.ChangeProfileReq.FromString,
          response_serializer=server__api__pb2.ResultBool.SerializeToString,
      ),
      'change_email': grpc.unary_unary_rpc_method_handler(
          servicer.change_email,
          request_deserializer=server__api__pb2.ChangeEmailReq.FromString,
          response_serializer=server__api__pb2.Empty.SerializeToString,
      ),
      'change_username': grpc.unary_unary_rpc_method_handler(
          servicer.change_username,
          request_deserializer=server__api__pb2.ChangeUsernameReq.FromString,
          response_serializer=server__api__pb2.Empty.SerializeToString,
      ),
      'get_file': grpc.unary_stream_rpc_method_handler(
          servicer.get_file,
          request_deserializer=server__api__pb2.Empty.FromString,
          response_serializer=server__api__pb2.Chunk.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'MicroService.ServerApi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
